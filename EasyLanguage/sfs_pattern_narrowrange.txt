[LegacyColorValue = true]; 

{
System      : sfs_pattern_narrowrange
Description : Use the Range Ratio to find Narrow Range Patterns

Copyright 2024 Scottfree Gains LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}

Inputs:
	{N Parameters}
	RatioLength1(1),
	RatioLength2(7),
	RangePercent(0.7),
	MaxRangeRatio(0.7),
	{Filter Parameters}
	FiltersOn(False),
	FilterLength(10),
	MinimumPrice(20),
	MinimumADX(18),
	MinimumHV(0.5),
	RetraceBars(3),
	{Position Parameters}
	Equity(1000000),
	RiskModel(3),
	RiskPercent(1.0),
	RiskATR(1.0),
	EntryFactor(0.10),
	DrawTargets(False);

Variables:
	N(0),
	ATR(0.0),
	ATRLength(20),
	MA(0.0),
	MALength(50),
	TradeFilter(True),
	BuyStop(0.0),
	ShortStop(0.0),
	{N Variables}
	NLength1(5),
	NLength2(10),
	NLength3(4),
	LowVolatility(False);

ATR = Volatility(ATRLength);
MA = Average(Close, MALength);

{Set Entry and Exit Stops}

BuyStop = High + (EntryFactor * ATR);
ShortStop = Low - (EntryFactor * ATR);

{sfgf. N Setup}

Condition1 = sff_range_narrowrange(NLength1, 1) and sff_range_narrowrange(NLength1, 0)[1];
Condition2 = Low > Low[1] and High < High[1] and Low[1] > Low[2] and High[1] < High[2];
Condition3 = sff_range_narrowrange(NLength2, 0);
Condition4 = sff_range_insidedaynarrowrange(NLength3, 0);
Condition5 = sff_range_rangeratio(RatioLength1, RatioLength2) <= MaxRangeRatio;
LowVolatility = Condition1 or Condition2 or Condition3 or Condition4 or Condition5;

{Run trade filters}

If FiltersOn Then
	TradeFilter = Close > MinimumPrice and
				  ADX(FilterLength) >= MinimumADX and
				  sff_range_volatility(FilterLength) >= MinimumHV;

If LowVolatility and
Range <= RangePercent * ATR and
TradeFilter Then Begin

	{Calculate shares based on risk model}
	N = sff_trade_getshares(Equity, RiskModel, RiskPercent, RiskATR, ATRLength, 1);

	{Narrow Range}

	If MedianPrice > MA and
	sff_pattern_retracedown(RetraceBars) Then Begin
		{Draw Entry Targets on the Chart}
		If DrawTargets Then
			Condition1 = sff_trade_plotentrytargets("N", BuyStop, 0, 0, 0);
		If DMIPlus(FilterLength) > DMIMinus(FilterLength) Then
			Buy("LE N") N Shares Next Bar at BuyStop Stop;
	End;

	If MedianPrice < MA and
	sff_pattern_retraceup(RetraceBars) Then Begin
		{Draw Entry Targets on the Chart}
		If DrawTargets Then
			Condition1 = sff_trade_plotentrytargets("N", 0, 0, ShortStop, 0);
		If DMIMinus(FilterLength) > DMIPlus(FilterLength) Then
			Sell Short("SE N") N Shares Next Bar at ShortStop Stop;
	End;
End;
