[LegacyColorValue = true]; 

{
Function    : sff_pattern_triplebottom
Description : Find a triple bottom formation

Copyright 2024 Scottfree Gains LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}

Inputs:
	LookbackBars(Numeric),
	Strength(Numeric),
	RangeFactor(Numeric);

Variables:
	TheDelta(0.0),
	HighPivot1(0.0),
	LowPivot1(0.0),
	HighPivot2(0.0),
	LowPivot2(0.0);

sff_pattern_triplebottom = -1;
TheDelta = RangeFactor * Volatility(LookbackBars);
HighPivot1 = PivotHighVSBar(1, High, Strength, Strength, LookbackBars);
LowPivot1 = PivotLowVSBar(1, Low, Strength, Strength, LookbackBars);
HighPivot2 = PivotHighVSBar(2, High, Strength, Strength, LookbackBars);
LowPivot2 = PivotLowVSBar(2, Low, Strength, Strength, LookbackBars);

If HighPivot1 <> -1 and
LowPivot1 <> -1 and
HighPivot2 <> -1 and
LowPivot2 <> -1 and
AbsValue(Low - Low[LowPivot1]) <= TheDelta and
AbsValue(Low - Low[LowPivot2]) <= TheDelta and
AbsValue(Low - Lowest(Low, LowPivot2)) <= TheDelta and
HighPivot1 < LowPivot1 and
HighPivot2 < LowPivot2 and
Low <= Low[1] Then
	sff_pattern_triplebottom = LowPivot2;
