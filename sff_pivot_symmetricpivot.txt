[LegacyColorValue = true]; 

{
Function    : sff_pivot_symmetricpivot
Description : Find the Symmetric Pivot pattern

Copyright 2024 Scottfree Gains LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}

Inputs:
	Pivots(NumericSimple),
	PM[MaxSize1, MaxSize2](NumericArrayRef),
	Strength(NumericSimple),
	Pattern[MaxSize3, MaxSize4](NumericArrayRef);

Variables:
	PatternPivots(3),
	ATR(0.0),
	ATRLength(20),
	ATRFactor(1.0),
	p1(0),
	p2(0),
	p3(0),
	v1(0.0),
	v2(0.0),
	v3(0.0),
	s1(0.0),
	s2(0.0),
	b1(0),
	b2(0),
	F(0.382);

sff_pivot_symmetricpivot = 0;
ATR = Volatility(ATRLength);
If Pivots >= PatternPivots and Strength >= 1 Then Begin
	{Bullish SymPivot}
	p3 = sff_pivot_pivothigh(Pivots, PM, 0, Pivots-1, Strength);
	p2 = sff_pivot_pivotlow(Pivots, PM, 0, Pivots-1, Strength);
	If p3 >= 0 and p2 >= 0 and
	p3 < p2 Then Begin
		v3 = High[PM[p3, 0]];
		v2 = Low[PM[p2, 0]];
		p1 = sff_pivot_pivothigh(Pivots, PM, p2+1, Pivots-1, Strength);
		If p1 >= 0 Then Begin
			v1 = High[PM[p1, 0]];
			If v1 > v2 and v1 < v3 Then Begin
				s1 = v1 - v2;
				s2 = v3 - Close;
				b1 = PM[p1, 0] - PM[p2, 0];
				b2 = PM[p3, 0];
				If AbsValue(s1 - s2) <= ATRFactor * ATR and
				AbsValue(b1 - b2) <= 0 and
				s1 >= F * (v3 - v2) Then Begin
					Pattern[1, 0] = PM[p1, 0];
					Pattern[1, 1] = PM[p1, 1];
					Pattern[1, 2] = PM[p1, 2];
					Pattern[1, 3] = PM[p1, 3];
					Pattern[2, 0] = PM[p2, 0];
					Pattern[2, 1] = PM[p2, 1];
					Pattern[2, 2] = PM[p2, 2];
					Pattern[2, 3] = PM[p2, 3];
					Pattern[3, 0] = PM[p3, 0];
					Pattern[3, 1] = PM[p3, 1];
					Pattern[3, 2] = PM[p3, 2];
					Pattern[3, 3] = PM[p3, 3];
					sff_pivot_symmetricpivot = PatternPivots;
				End;
			End;
		End;
	End;
	{Bearish SymPivot}
	p2 = sff_pivot_pivothigh(Pivots, PM, 0, Pivots-1, Strength);
	p3 = sff_pivot_pivotlow(Pivots, PM, 0, Pivots-1, Strength);
	If p2 >= 0 and p3 >= 0 and
	p3 < p2 Then Begin
		v2 = High[PM[p2, 0]];
		v3 = Low[PM[p3, 0]];
		p1 = sff_pivot_pivotlow(Pivots, PM, p2+1, Pivots-1, Strength);
		If p1 >= 0 Then Begin
			v1 = Low[PM[p1, 0]];
			If v1 < v2 and v1 > v3 Then Begin
				s1 = v2 - v1;
				s2 = Close - v3;
				b1 = PM[p1, 0] - PM[p2, 0];
				b2 = PM[p3, 0];
				If AbsValue(s1 - s2) <= ATRFactor * ATR and
				AbsValue(b1 - b2) <= 0 and
				s1 >= F * (v2 - v3) Then Begin
					Pattern[1, 0] = PM[p1, 0];
					Pattern[1, 1] = PM[p1, 1];
					Pattern[1, 2] = PM[p1, 2];
					Pattern[1, 3] = PM[p1, 3];
					Pattern[2, 0] = PM[p2, 0];
					Pattern[2, 1] = PM[p2, 1];
					Pattern[2, 2] = PM[p2, 2];
					Pattern[2, 3] = PM[p2, 3];
					Pattern[3, 0] = PM[p3, 0];
					Pattern[3, 1] = PM[p3, 1];
					Pattern[3, 2] = PM[p3, 2];
					Pattern[3, 3] = PM[p3, 3];
					sff_pivot_symmetricpivot = -PatternPivots;
				End;
			End;
		End;
	End;
End;
